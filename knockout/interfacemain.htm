<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<script type='text/javascript' src='knockout-2.2.1.debug.js'></script>
<script type='text/javascript' src='knockout.validation.js'></script>
<script type='text/javascript' src='sko.js'></script>
<link rel=stylesheet type="text/css" href="sko.css">
<style>
</style>
</head>
<body onload="Init();">

<div data-bind="foreach:T1">
	<p data-bind="text:f1"></p>
	<p data-bind="text:rel1.value"></p>
	<p data-bind="text:rel1().f2"></p>
	<p data-bind="text:rel12().f2"></p>
		<div data-bind="foreach:rel12()">
			<>
		</div>
	<p data-bind="text:rel1().rel2.value"></p>
	<p data-bind="text:rel1().rel2().f3"></p>
</div>

<script>

	function patchModel(model) {
		for(var i in model) {
			var table = model[i];
			for(var j in table) {
				var field = table[j];
				if(field.target) {
					field.target = model[field.target];
				}
			}
		}
		return model;
	}
	var metaModel = patchModel({
		T1:{
			name:'T1',
			id:{name:'id'},
			f1:{name:'Ф 1'},
			rel1:{name:'Рел 1',target:'T2'},
			rel12:{name:'Рел 12',target:'T2'}
		},
		T2:{
			name:'T2',
			id:{name:'id'},
			f2:{name:'Ф 2'},
			rel2:{name:'Рел 2',target:'T3'}
		},
		T3:{
			name:'T3',
			id:{name:'id'},
			f3:{name:'Ф 3'},
			rel3:{name:'Рел циклический',target:'T1'}
		}
	});
	/*var datamodel = {
		T1 : [
			[0,'Первая строка',1],
			[1,'Вторая строка',1],
			[2,'Третья строчка',2]
		],
		T2 : [
			[0,'Иван',0],
			[1,'Мария',null],
			[2,'Джон',0],
			[3,'Кэрол',1],
			[4,'Марк',null],
		],
		T3 : [
			[0,'Москва',1],
			[1,'Санкт-Петербург',1],
			[2,'Орел',1],
			[3,'Владимир',1]
		]
	}*/
	/*
	T1 = ko.observableArray({id, f1, rel1().id, rel1().f2, rel1().rel2(), rel1().rel2().id, rel1.rel2().f3 })
	T1 = ko.observableArray({ id, f1, rel1() })
	*/

	function rowModel(tableObject) {
		var self = this;
		self.$ = tableObject;
		for(var fieldName in tableObject) {
			var fieldObj = tableObject[fieldName];
			if(fieldObj.target) {
				self[fieldName] = function() { return self[fieldName].cache || (self[fieldName].cache = new rowModel(fieldObj.target)); }
				self[fieldName].value = ko.observable('');
				self[fieldName].value.$ = fieldObj;
			} else 
			if(fieldObj.name) {
				self[fieldName] = ko.observable('');
				self[fieldName].$ = fieldObj;
			}
		}
	}
	/*function traceUsage(rowModel) {
		var sqlTable = { node: rowModel, childs:{} };
		for(var j in rowModel) {
			if(rowModel[j].value) {//observable rel
				if(rowModel[j].cache) {
					console.log('relation '+j + ' is used');
					sqlTable.childs[j] = traceUsage(rowModel[j].cache);
				}
			}
			else {//field
				if(rowModel[j].getSubscriptionsCount && rowModel[j].getSubscriptionsCount()) {//observable field
					console.log(j + ' is used');
					sqlTable.childs[j] = rowModel[j];
				}
			}
		}
		return sqlTable;
	}*/
	function traceUsage(rowModel, trace) {
		var usageTrace = (trace || []);
		for(var j in rowModel) {
			if(rowModel[j].value) {//observable rel
				if(rowModel[j].cache) {
					console.log('relation '+j + ' is used');
					usageTrace.push(rowModel[j].value);
					traceUsage(rowModel[j].cache, usageTrace);
				}
			}
			else {//field
				if(rowModel[j].getSubscriptionsCount && rowModel[j].getSubscriptionsCount()) {//observable field
					console.log(j + ' is used');
					usageTrace.push(rowModel[j]);
				}
			}
		}
		return usageTrace;
	}
	var Alias = {
		i:0,
		aliases:{},
		get : function(tableName) {
			var alias = makeAlias(this.i++)
			aliases[alias] = tableName;
			return alias;
		},
		table : function(tableAlias) {
			return aliases[tableAlias];
		},
		makeAlias : function(n) {
			return "abcderfghijklmnopqrstuvwxyz".charAt(n) ||
			this.makeAlias(n/26)+(n%26);
		}
	};
	function makeSQL(model) {
		//нужны алиас таблицы(имя таблицы можно получить), имена полей, их иерархия
		/*{
			node:T1,
			childs:{
				//id
				f1:ko,
				rel1:{
					node:T2,
					childs:{
						//id
						f2:ko,
						rel2: {
							node:T3,
							childs: {
								f3:ko
							}
						}
					}
				},
				rel12:{
					node:T2,
					childs:{
						//id
						f2:ko
					}
				}
			}
		}*/
	}
	function sendSqlRequest(sql, callback) {
		//TODO: sql запрос и получение данных в формате JS в функцию pushData
	}
	function processDataArray(dataArray, usage, offset) {
		offset = offset || 0;
		for(var i = 0;i < dataArray.length;++i) {
			if(!dataArray[i].length) {//object
				usage[i+offset](dataArray[i]);
			} else {
				processDataArray(dataArray[i],usage,i);
			}
		}
	}
	function takeAnswer(answer, usage, target) {
		//target - Это объект или массив
		if(target().length) {//array
			for(var i = 0;i < target().length;++i) {
				processDataArray(answer, target.addElement());
			}
			target.ready = true;
		} else {//object
			processDataArray(answer, usage);
		}
	}
	function addition(koArray) {
		koArray.ready = false;
		koArray.destroy = function(obj) {
			this.remove(obj);
		}
		koArray.addElement = function () {
			this.model = new rowModel(this.$);
			this.usage = traceUsage(this.model);
			this().push(this.model);
			return this.usage;
		}
		koArray.sendQuery = function(where,group,order) {//вызывается первым
			var sql = makeSQL(this.model);
			sql.where = where || sql.where;
			sql.group = group || sql.group;
			sql.order = order || sql.order;
			sendSqlRequest(sql, takeAnswer, this);
		}
		koArray.addElement();
		return koArray;
	}
	function sendQuery(model) {
		for(var i in model) {
			if(model[i].sendQuery) {
				
			}
		}
	}
	function modelArray(tableName) {
		var koModel = {};
		koModel[tableName] = addition(ko.observableArray());
	}
	function modelObject() {
		
	}
	void Init() {
		var model1 = modelArray('T1');//or var model2 = modelObject('T1');
		ko.applyBindings(model);
		sendQuery(model);
	}
	takeAnswer(
		[
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''},
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''},
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''}
		],
		[]
	);
	/*
	function pushData(model) {
		for(var i in model) {
			var table = model[i];
			if(datamodel[i]) {
				for(var j = 0; j<datamodel[i].length;++i) {
					
				}
			}
		}
	}*/
	function processArray(tableName) {
		var koModel = {};
		koModel[tableName] = ko.observableArray([new rowModel(metaModel[tableName])]);
		traceUsage(koModel[tableName]()[0]);
		
	}
	function processObject() {
		
	}
	/*function Init() {
		//var koModel = {};
		//koModel['T1'] = ko.observableArray([new rowModel(metaModel['T1'])]);
		//ko.applyBindings(koModel);
		//traceUsage(koModel['T1']()[0],{});
	}*/
</script>
</body>
</html>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<script type='text/javascript' src='knockout/knockout-2.2.1.debug.js'></script>
<script type='text/javascript' src='knockout/knockout.validation.js'></script>
<script type='text/javascript' src='knockout/sko.js'></script>
<link rel=stylesheet type="text/css" href="knockout/sko.css">
<style>
</style>
</head>
<body onload="Init();">

<div data-bind="foreach:T1">
	<p data-bind="text:f1"></p>
	<p data-bind="text:rel1.value"></p>
	<p data-bind="text:rel1().f2"></p>
		<div data-bind="foreach:rel12()">
			<p data-bind="text:f2"></p>
		</div>
	<p data-bind="text:rel1().rel2.value"></p>
	<p data-bind="text:rel1().rel2().f3"></p>
</div>

<script>

	function patchModel(model) {
		for(var i in model) {
			var table = model[i];
			for(var j in table) {
				var field = table[j];
				if(field.target) {
					field.target = model[field.target];
				}
			}
		}
		return model;
	}
	var metaModel = patchModel({
		T1:{
			name:'T1',
			id:{name:'id'},
			f1:{name:'Ф 1'},
			rel1:{name:'Рел 1',target:'T2'},
			rel12:{name:'Рел 12',target:'T2',where:{'year=2012'}}
		},
		T2:{
			name:'T2',
			id:{name:'id'},
			f2:{name:'Ф 2'},
			rel2:{name:'Рел 2',target:'T3'}
		},
		T3:{
			name:'T3',
			id:{name:'id'},
			f3:{name:'Ф 3'},
			rel3:{name:'Рел циклический',target:'T1'}
		}
	});
	/*var datamodel = {
		T1 : [
			[0,'Первая строка',1],
			[1,'Вторая строка',1],
			[2,'Третья строчка',2]
		],
		T2 : [
			[0,'Иван',0],
			[1,'Мария',null],
			[2,'Джон',0],
			[3,'Кэрол',1],
			[4,'Марк',null],
		],
		T3 : [
			[0,'Москва',1],
			[1,'Санкт-Петербург',1],
			[2,'Орел',1],
			[3,'Владимир',1]
		]
	}*/
	/*
	T1 = ko.observableArray({id, f1, rel1().id, rel1().f2, rel1().rel2(), rel1().rel2().id, rel1.rel2().f3 })
	T1 = ko.observableArray({ id, f1, rel1() })
	*/
	function sendSqlRequest(sql, callback) {
		//TODO: sql запрос и получение данных в формате JS в функцию pushData
	}
	function processArray(answer, target) {//koArray = [ko,ko,ko,koArray,ko,koArray]
		//target - Это объект или массив
		for(var i = 0;i < answer.length;++i) {
			var usage = (target.addElement()).usage;
			var k = 0;
			for(var j in answer[i]) {
				var cell = answer[i][j];
				if(cell.length) {
					processArray(cell,usage[k]);
				} else {
					usage[k](answer[i][j]);
				}
				k++;
			}
		}
		target.dataReceived = true;
	}
	function tableNode(tableObject, where) {
		var self = this;
		var table = self[tableObject.name] = ko.observableArray();
		table.$ = tableObject;
		table.where = where;
		table.dataReceived = false;
		table.destroy = function(obj) {
			this.remove(obj);
		}
		table.ready = function() {
			return dataReceived;
		}
		table.addElement = function(fake) {
			var rowModel = new rowNode(this.$);
			this().push(rowModel);
			var usage = traceUsage(this()[this().length-1]);
			return {usage:usage,element:rowModel};
		}
		table.sendQuery = function() {//вызывается первым
			var elemInfo = this.addElement();//на основании модели построит запрос
			this.destroy(elemInfo.element);
			this.dataReceived = false;
			sendSqlRequest(elemInfo.usage.sql, processArray, this);//посылаем запрос
		}
	}
	function rowNode(tableObject) {
		var self = this;
		for(var fieldName in tableObject) {
			var fieldObj = tableObject[fieldName];
			if(fieldObj.target) {
					self[fieldName] = function() { 
						return self[fieldName].cache || 
							(self[fieldName].cache = (fieldObj.where ? 
								new tableNode(fieldObj.target,fieldObj.where) :
								new rowNode(fieldObj.target)));
					}
					self[fieldName].value = ko.observable('');
					self[fieldName].value.$ = fieldObj;

			} else 
			if(fieldObj.name) {
				self[fieldName] = ko.observable('');
				self[fieldName].$ = fieldObj;
			}
		}
	}
	function traceUsage(tableModel, trace, select) {//[ko,ko,ko,ko,koArray,ko,ko,koArray]
		var usageTrace = (trace || []);
		var rowModel = tableModel()[0];
		var sqlSelect = (select || {fields:[],joins:''});
		//SELECT alias1.f1,alias2.f2,alias3.f3,alias4.f4 FROM (alias1 INNER JOIN (alias2 ON alias1.rel=alias2.id INNER JOIN (alias3 ON alias2.rel=alias3.id INNER JOIN alias4 ON alias3.rel=alias4.id)))
		//rowModel
		
		var alias = Alias.get(tableModel.$.name);
		for(var j in rowModel) {
			if(rowModel[j].value) {//observable rel
				if(rowModel[j].cache) {
					console.log('relation ' + j + ' is used');
					if(rowModel[j].value.getSubscriptionsCount()) {
						usageTrace.push(rowModel[j].value);
						sqlSelect.fields.push(alias+'.'+rowModel[j].value.$.name);//usage
					}
					if(rowModel[j].where) {
						var elemInfo = rowModel[j].cache().addElement();
						rowModel[j].cache().destroy(elemInfo.element);
						if(elemInfo.usage.trace.length) {
							usageTrace.push(rowModel[j].cache);
							//usage
						}
					}
					else {
						traceUsage(rowModel[j].cache, usageTrace);
					}
				}
			}
			else {//field
				if(rowModel[j].getSubscriptionsCount && rowModel[j].getSubscriptionsCount()) {//observable field
					console.log(j + ' is used');
					usageTrace.push(rowModel[j]);
					sqlSelect.fields.push(alias+'.'+rowModel[j].$.name);//usage
				}
			}
		}
		return {trace: usageTrace, sql: sqlSelect};
	}
	function Init() {
		var M = tableNode(metaModel['T1']);//rowNode
		ko.applyBindigs(M);
		sendQuery(M, where);
	}
	function rowModel(tableObject) {
		var self = this;
		self.$ = tableObject;
		for(var fieldName in tableObject) {
			var fieldObj = tableObject[fieldName];
			if(fieldObj.target) {
				self[fieldName] = function() { return self[fieldName].cache || (self[fieldName].cache = new rowModel(fieldObj.target)); }
				self[fieldName].value = ko.observable('');
				self[fieldName].value.$ = fieldObj;
			} else 
			if(fieldObj.name) {
				self[fieldName] = ko.observable('');
				self[fieldName].$ = fieldObj;
			}
		}
	}
	/*function traceUsage(rowModel) {
		var sqlTable = { node: rowModel, childs:{} };
		for(var j in rowModel) {
			if(rowModel[j].value) {//observable rel
				if(rowModel[j].cache) {
					console.log('relation '+j + ' is used');
					sqlTable.childs[j] = traceUsage(rowModel[j].cache);
				}
			}
			else {//field
				if(rowModel[j].getSubscriptionsCount && rowModel[j].getSubscriptionsCount()) {//observable field
					console.log(j + ' is used');
					sqlTable.childs[j] = rowModel[j];
				}
			}
		}
		return sqlTable;
	}*/
	var Alias = {
		i:0,
		aliases:{},
		get : function(tableName) {
			var alias = makeAlias(this.i++)
			aliases[alias] = tableName;
			return alias;
		},
		table : function(tableAlias) {
			return aliases[tableAlias];
		},
		makeAlias : function(n) {
			return "abcderfghijklmnopqrstuvwxyz".charAt(n) ||
			this.makeAlias(n/26)+(n%26);
		}
	};
	function makeSQL(model) {
		//нужны алиас таблицы(имя таблицы можно получить), имена полей, их иерархия
		/*{
			node:T1,
			childs:{
				//id
				f1:ko,
				rel1:{
					node:T2,
					childs:{
						//id
						f2:ko,
						rel2: {
							node:T3,
							childs: {
								f3:ko
							}
						}
					}
				},
				rel12:{
					node:T2,
					childs:{
						//id
						f2:ko
					}
				}
			}
		}*/
	}


	function sendQuery(model) {
		for(var i in model) {
			if(model[i].sendQuery) {
				
			}
		}
	}
	function multiObject(tableName) {
		var koModel = {};
		var array = ko.observableArray();
		array.$ = metaModel[tableName];
		koModel[tableName] = addition(array);
		return koModel;
	}
	function singleObject(tableName) {
		return new rowModel(metaModel[tableName]);
	}
	void Init() {
		var model1 = multiObject('T1');//or var model2 = singleObject('T1');
		ko.applyBindings(model);
		sendQuery(model);
	}
	takeAnswer(
		[
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''},
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''},
			{'a.f1':'','a.rel1':'','b.f2':
				[{'d.f21':'','d.f22':'','d.f23':''},
				{'d.f21':'','d.f22':'','d.f23':''}],
				'b.rel2':'','c.f3':''}
		],
		[]
	);
	/*
	function pushData(model) {
		for(var i in model) {
			var table = model[i];
			if(datamodel[i]) {
				for(var j = 0; j<datamodel[i].length;++i) {
					
				}
			}
		}
	}*/
	function processArray(tableName) {
		var koModel = {};
		koModel[tableName] = ko.observableArray([new rowModel(metaModel[tableName])]);
		traceUsage(koModel[tableName]()[0]);
		
	}
	function processObject() {
		
	}
	/*function Init() {
		//var koModel = {};
		//koModel['T1'] = ko.observableArray([new rowModel(metaModel['T1'])]);
		//ko.applyBindings(koModel);
		//traceUsage(koModel['T1']()[0],{});
	}*/
</script>
</body>
</html>